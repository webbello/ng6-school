#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../../app');
var debug = require('debug')('backend:server');
var http = require('http');

const fs = require('fs');
const https = require('https');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);


const hostname = 'localhost';
const httpsPort = normalizePort(process.env.PORT || '3001');

const httpsOptions = {
  cert: fs.readFileSync('./../ssl/wildcard_iirs.gov.in.crt'),
  ca: fs.readFileSync('./../ssl/root_apache.crt'),
  key: fs.readFileSync('./../ssl/iirs_privateKey.key')
};

const httpsServer = https.createServer(httpsOptions, app);

var io = require('socket.io')(server);

let numberOfActiveSockets = 0;

io.on('connect', (socket) => {

      socket.removeAllListeners();
      
      console.log('Connected client on port %s.', 3000);

      socket.on('connect', () => {
        numberOfActiveSockets++;
        io.emit('numberOfActiveSockets', numberOfActiveSockets);
        console.log('Client connected on Event.CONNECT %s.', numberOfActiveSockets);
      });
      
      // Log whenever a client disconnects from our websocket server
      socket.on('disconnect', () => {
        numberOfActiveSockets--;
        io.emit('numberOfActiveSockets', numberOfActiveSockets);
        console.log('Client disconnected');
      });

      socket.on('message', (message) => {
          console.log('[server](message): %s', JSON.stringify(message));
          io.emit('message', message);
      });

      socket.on('quiz', (quiz) => {
          //console.log('[server](quiz): %s', JSON.stringify(quiz));
          io.emit('quiz', quiz);
      });

      socket.on('quizResult', (quizResult) => {
          //console.log('[server](quizResult): %s', JSON.stringify(quizResult));
          io.emit('quizResult', quizResult);
      });

});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
//for https
httpsServer.listen(httpsPort);

server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
