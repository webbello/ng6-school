#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../../app');
var debug = require('debug')('backend:server');
var http = require('http');

const fs = require('fs');
const https = require('https');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);


//const hostname = 'eclass.iirs.gov.in';
const hostname = '192.168.17.35';
const httpsPort = normalizePort(process.env.PORT || '3001');

const httpsOptions = {
  cert: fs.readFileSync('./../ssl/wildcard_iirs.gov.in.crt'),
  ca: fs.readFileSync('./../ssl/root_apache.crt'),
  key: fs.readFileSync('./../ssl/iirs_privateKey.key')
};

const httpsServer = https.createServer(httpsOptions, app);

var io = require('socket.io')(server);

io.on('connect', (socket) => {
      socket.removeAllListeners();
      console.log('Connected client on port %s.', 3000);
      socket.on('message', (message) => {
        let Chat = require('../models/chat.js');
        var chatExist = [];
        var query = { 
          lecture_id: message.lecture_id,
          course_id: message.course_id
        };
        Chat.find(query, function (err, reports) {
          if (err) {
            //res.send(err);
            console.log('err',err );
            return err;
          }
          //res.json(reports);
          chatExist.push(reports);
          console.log('reports.length',reports.length);
          var mongoose = require('mongoose');
          let messageWithTime = {
            _id: new mongoose.Types.ObjectId(),
            from: {userId: message.from.userId, name: message.from.name, avatar: message.from.avatar },
            content: message.content,
            parent_id: message.parent_id,
            parent_message: message.parent_message,
            created_at: new Date()
          }
          if (typeof reports !== 'undefined' && reports.length > 0) {
            console.log('reportsExist', reports );
            Chat.updateOne(
              { lecture_id: message.lecture_id,  course_id: message.course_id},
              { $addToSet: { message: [ messageWithTime ] } }
            ).then(chat => {
                console.log('Update done', chat);
            }).catch(err => {
                console.log('Update failed', err);
            });
          } else {
            console.log('reportsExist Else', reports );
            Chat = new Chat({
              // user_id: message.from.userId,
              lecture_id: message.lecture_id,
              course_id: message.course_id,
              message: messageWithTime,
              created_at: new Date()
            });
            Chat.save(function (err) {
              if (err) {
                //res.send(err);
                console.log('err',err );
                return err;
              }
              console.log('New Chat Log Created');
            });
          }
        });
        console.log('chatExist', chatExist);
        console.log('[server](message): %s', JSON.stringify(message));
        io.emit('message', message);
      });

      socket.on('quiz', (quiz) => {
          console.log('[server](quiz): %s', JSON.stringify(quiz));
          io.emit('quiz', quiz);
      });

      socket.on('quizResult', (quizResult) => {
          console.log('[server](quizResult): %s', JSON.stringify(quizResult));
          io.emit('quizResult', quizResult);
      });

      socket.on('disconnect', () => {
          console.log('Client disconnected');
      });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
//for https
httpsServer.listen(httpsPort, hostname);

server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
